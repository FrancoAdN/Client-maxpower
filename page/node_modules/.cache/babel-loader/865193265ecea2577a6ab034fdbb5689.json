{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Client-maxpower\\\\page\\\\src\\\\_useChat.js\";\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nexport const SockContext = createContext();\nexport default function Store(props) {\n  const socket = useRef();\n  const [messages, setMessages] = useState([{\n    from: 0,\n    msg: 'Bienvenido al chat!'\n  }]);\n  const [connected, setConnected] = useState(false);\n  const [server, setServer] = useState(false);\n  const [user, setUser] = useState({});\n  const userRef = useRef();\n  const messagesRef = useRef();\n  useEffect(() => {\n    userRef.current = user;\n  }, [user]);\n  useEffect(() => {\n    messagesRef.current = messages;\n  }, [messages]);\n  useEffect(() => {\n    socket.current = io(\"http://api.maxpower-ar.com/\");\n    socket.current.on('server_message', message => {\n      setMessages(messages => [...messages, message]);\n      console.log(message);\n    });\n    socket.current.on('server_disconnected', () => setServer(false));\n    socket.current.on('existing_conv', () => {\n      const client_data = {\n        name: userRef.current.name,\n        email: userRef.current.email,\n        tel: userRef.current.tel,\n        emp: userRef.current.emp,\n        messages: messagesRef.current\n      };\n      socket.current.emit('client_existing_conv', client_data);\n    });\n    return () => {\n      socket.current.disconnect();\n    };\n  }, []);\n\n  const sendMessage = data => {\n    setMessages(messages => [...messages, data]);\n    socket.current.emit(\"client_message\", data);\n  };\n\n  const connectClient = client => {\n    setUser(client);\n    socket.current.emit('client_conn', client);\n    setConnected(true);\n    setServer(true);\n  };\n\n  return /*#__PURE__*/React.createElement(SockContext.Provider, {\n    value: {\n      messages,\n      sendMessage,\n      connectClient,\n      connected,\n      server\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/Client-maxpower/page/src/_useChat.js"],"names":["React","createContext","useState","useRef","useEffect","io","SockContext","Store","props","socket","messages","setMessages","from","msg","connected","setConnected","server","setServer","user","setUser","userRef","messagesRef","current","on","message","console","log","client_data","name","email","tel","emp","emit","disconnect","sendMessage","data","connectClient","client","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nexport const SockContext = createContext()\r\n\r\n\r\n\r\nexport default function Store(props) {\r\n\r\n    const socket = useRef()\r\n    const [messages, setMessages] = useState([{ from: 0, msg: 'Bienvenido al chat!' }])\r\n    const [connected, setConnected] = useState(false)\r\n    const [server, setServer] = useState(false)\r\n    const [user, setUser] = useState({})\r\n    const userRef = useRef()\r\n    const messagesRef = useRef()\r\n\r\n    useEffect(() => {\r\n        userRef.current = user\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        messagesRef.current = messages\r\n    }, [messages])\r\n\r\n    useEffect(() => {\r\n        socket.current = io(\"http://api.maxpower-ar.com/\")\r\n\r\n        socket.current.on('server_message', (message) => {\r\n            setMessages(messages => [...messages, message])\r\n            console.log(message)\r\n        })\r\n\r\n        socket.current.on('server_disconnected', () => setServer(false))\r\n\r\n        socket.current.on('existing_conv', () => {\r\n            const client_data = { name: userRef.current.name, email: userRef.current.email, tel: userRef.current.tel, emp: userRef.current.emp, messages: messagesRef.current }\r\n            socket.current.emit('client_existing_conv', client_data)\r\n        })\r\n\r\n\r\n        return () => {\r\n            socket.current.disconnect()\r\n        }\r\n    }, [])\r\n\r\n\r\n    const sendMessage = (data) => {\r\n        setMessages(messages => [...messages, data])\r\n        socket.current.emit(\"client_message\", data)\r\n    }\r\n\r\n    const connectClient = (client) => {\r\n        setUser(client)\r\n        socket.current.emit('client_conn', client)\r\n        setConnected(true)\r\n        setServer(true)\r\n    }\r\n\r\n    return (\r\n        <SockContext.Provider value={{ messages, sendMessage, connectClient, connected, server }}>\r\n            {props.children}\r\n        </SockContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}