{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\User\\\\Desktop\\\\Client-maxpower\\\\page\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\User\\\\Desktop\\\\Client-maxpower\\\\page\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{createContext,useState,useRef,useEffect}from'react';import io from'socket.io-client';export var SockContext=createContext();export default function Store(props){var socket=useRef();var _useState=useState([{from:0,msg:'Bienvenido al chat!'}]),_useState2=_slicedToArray(_useState,2),messages=_useState2[0],setMessages=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),connected=_useState4[0],setConnected=_useState4[1];useEffect(function(){socket.current=io(\"http://localhost:5000\");socket.current.on('server_message',function(message){setMessages(function(messages){return[].concat(_toConsumableArray(messages),[message]);});console.log(message);});return function(){socket.current.disconnect();};},[]);var sendMessage=function sendMessage(data){setMessages(function(messages){return[].concat(_toConsumableArray(messages),[data]);});socket.current.emit(\"client_message\",data);};var connectClient=function connectClient(client){socket.current.emit('client_conn',client);setConnected(true);};return/*#__PURE__*/React.createElement(SockContext.Provider,{value:{messages:messages,sendMessage:sendMessage,connectClient:connectClient,connected:connected}},props.children);}","map":{"version":3,"sources":["C:/Users/User/Desktop/Client-maxpower/page/src/_useChat.js"],"names":["React","createContext","useState","useRef","useEffect","io","SockContext","Store","props","socket","from","msg","messages","setMessages","connected","setConnected","current","on","message","console","log","disconnect","sendMessage","data","emit","connectClient","client","children"],"mappings":"8VAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,QAA/B,CAAyCC,MAAzC,CAAiDC,SAAjD,KAAkE,OAAlE,CACA,MAAOC,CAAAA,EAAP,KAAe,kBAAf,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAGL,aAAa,EAAjC,CAIP,cAAe,SAASM,CAAAA,KAAT,CAAeC,KAAf,CAAsB,CAEjC,GAAMC,CAAAA,MAAM,CAAGN,MAAM,EAArB,CAFiC,cAGDD,QAAQ,CAAC,CAAC,CAAEQ,IAAI,CAAE,CAAR,CAAWC,GAAG,CAAE,qBAAhB,CAAD,CAAD,CAHP,wCAG1BC,QAH0B,eAGhBC,WAHgB,8BAICX,QAAQ,CAAC,KAAD,CAJT,yCAI1BY,SAJ0B,eAIfC,YAJe,eAMjCX,SAAS,CAAC,UAAM,CACZK,MAAM,CAACO,OAAP,CAAiBX,EAAE,CAAC,uBAAD,CAAnB,CAGAI,MAAM,CAACO,OAAP,CAAeC,EAAf,CAAkB,gBAAlB,CAAoC,SAACC,OAAD,CAAa,CAC7CL,WAAW,CAAC,SAAAD,QAAQ,qCAAQA,QAAR,GAAkBM,OAAlB,IAAT,CAAX,CACAC,OAAO,CAACC,GAAR,CAAYF,OAAZ,EACH,CAHD,EAKA,MAAO,WAAM,CACTT,MAAM,CAACO,OAAP,CAAeK,UAAf,GACH,CAFD,CAGH,CAZQ,CAYN,EAZM,CAAT,CAeA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,CAAU,CAC1BV,WAAW,CAAC,SAAAD,QAAQ,qCAAQA,QAAR,GAAkBW,IAAlB,IAAT,CAAX,CACAd,MAAM,CAACO,OAAP,CAAeQ,IAAf,CAAoB,gBAApB,CAAsCD,IAAtC,EACH,CAHD,CAKA,GAAME,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,MAAD,CAAY,CAC9BjB,MAAM,CAACO,OAAP,CAAeQ,IAAf,CAAoB,aAApB,CAAmCE,MAAnC,EACAX,YAAY,CAAC,IAAD,CAAZ,CACH,CAHD,CAKA,mBACI,oBAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAE,CAAEH,QAAQ,CAARA,QAAF,CAAYU,WAAW,CAAXA,WAAZ,CAAyBG,aAAa,CAAbA,aAAzB,CAAwCX,SAAS,CAATA,SAAxC,CAA7B,EACKN,KAAK,CAACmB,QADX,CADJ,CAKH","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nexport const SockContext = createContext()\r\n\r\n\r\n\r\nexport default function Store(props) {\r\n\r\n    const socket = useRef()\r\n    const [messages, setMessages] = useState([{ from: 0, msg: 'Bienvenido al chat!' }])\r\n    const [connected, setConnected] = useState(false)\r\n\r\n    useEffect(() => {\r\n        socket.current = io(\"http://localhost:5000\")\r\n\r\n\r\n        socket.current.on('server_message', (message) => {\r\n            setMessages(messages => [...messages, message])\r\n            console.log(message)\r\n        })\r\n\r\n        return () => {\r\n            socket.current.disconnect()\r\n        }\r\n    }, [])\r\n\r\n\r\n    const sendMessage = (data) => {\r\n        setMessages(messages => [...messages, data])\r\n        socket.current.emit(\"client_message\", data)\r\n    }\r\n\r\n    const connectClient = (client) => {\r\n        socket.current.emit('client_conn', client)\r\n        setConnected(true)\r\n    }\r\n\r\n    return (\r\n        <SockContext.Provider value={{ messages, sendMessage, connectClient, connected }}>\r\n            {props.children}\r\n        </SockContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}