{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Client-maxpower\\\\page\\\\src\\\\_useChat.js\";\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nexport const SockContext = createContext();\nexport default function Store(props) {\n  const socket = useRef();\n  const [messages, setMessages] = useState([{\n    from: 0,\n    msg: 'Bienvenido al chat!'\n  }]);\n  const [connected, setConnected] = useState(false);\n  const [server, setServer] = useState(false);\n  useEffect(() => {\n    socket.current = io(\"http://localhost:5000\");\n    socket.current.on('server_message', message => {\n      setMessages(messages => [...messages, message]);\n      console.log(message);\n    });\n    socket.current.on('server_disconnected', () => {\n      console.log('server is disconnected');\n      setServer(false);\n    });\n    return () => {\n      socket.current.disconnect();\n    };\n  }, []);\n\n  const sendMessage = data => {\n    setMessages(messages => [...messages, data]);\n    socket.current.emit(\"client_message\", data);\n  };\n\n  const connectClient = client => {\n    socket.current.emit('client_conn', client);\n    setConnected(true);\n    setServer(true);\n  };\n\n  return /*#__PURE__*/React.createElement(SockContext.Provider, {\n    value: {\n      messages,\n      sendMessage,\n      connectClient,\n      connected,\n      server\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/Client-maxpower/page/src/_useChat.js"],"names":["React","createContext","useState","useRef","useEffect","io","SockContext","Store","props","socket","messages","setMessages","from","msg","connected","setConnected","server","setServer","current","on","message","console","log","disconnect","sendMessage","data","emit","connectClient","client","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiDC,SAAjD,QAAkE,OAAlE;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAO,MAAMC,WAAW,GAAGL,aAAa,EAAjC;AAIP,eAAe,SAASM,KAAT,CAAeC,KAAf,EAAsB;AAEjC,QAAMC,MAAM,GAAGN,MAAM,EAArB;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,CAAC;AAAEU,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE;AAAhB,GAAD,CAAD,CAAxC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,KAAD,CAApC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,MAAM,CAACS,OAAP,GAAiBb,EAAE,CAAC,uBAAD,CAAnB;AAGAI,IAAAA,MAAM,CAACS,OAAP,CAAeC,EAAf,CAAkB,gBAAlB,EAAqCC,OAAD,IAAa;AAC7CT,MAAAA,WAAW,CAACD,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcU,OAAd,CAAb,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACH,KAHD;AAKAX,IAAAA,MAAM,CAACS,OAAP,CAAeC,EAAf,CAAkB,qBAAlB,EAAyC,MAAM;AAC3CE,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAL,MAAAA,SAAS,CAAC,KAAD,CAAT;AACH,KAHD;AAKA,WAAO,MAAM;AACTR,MAAAA,MAAM,CAACS,OAAP,CAAeK,UAAf;AACH,KAFD;AAGH,GAjBQ,EAiBN,EAjBM,CAAT;;AAoBA,QAAMC,WAAW,GAAIC,IAAD,IAAU;AAC1Bd,IAAAA,WAAW,CAACD,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAce,IAAd,CAAb,CAAX;AACAhB,IAAAA,MAAM,CAACS,OAAP,CAAeQ,IAAf,CAAoB,gBAApB,EAAsCD,IAAtC;AACH,GAHD;;AAKA,QAAME,aAAa,GAAIC,MAAD,IAAY;AAC9BnB,IAAAA,MAAM,CAACS,OAAP,CAAeQ,IAAf,CAAoB,aAApB,EAAmCE,MAAnC;AACAb,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH,GAJD;;AAMA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEP,MAAAA,QAAF;AAAYc,MAAAA,WAAZ;AAAyBG,MAAAA,aAAzB;AAAwCb,MAAAA,SAAxC;AAAmDE,MAAAA;AAAnD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKR,KAAK,CAACqB,QADX,CADJ;AAKH","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nexport const SockContext = createContext()\r\n\r\n\r\n\r\nexport default function Store(props) {\r\n\r\n    const socket = useRef()\r\n    const [messages, setMessages] = useState([{ from: 0, msg: 'Bienvenido al chat!' }])\r\n    const [connected, setConnected] = useState(false)\r\n    const [server, setServer] = useState(false)\r\n\r\n    useEffect(() => {\r\n        socket.current = io(\"http://localhost:5000\")\r\n\r\n\r\n        socket.current.on('server_message', (message) => {\r\n            setMessages(messages => [...messages, message])\r\n            console.log(message)\r\n        })\r\n\r\n        socket.current.on('server_disconnected', () => {\r\n            console.log('server is disconnected')\r\n            setServer(false)\r\n        })\r\n\r\n        return () => {\r\n            socket.current.disconnect()\r\n        }\r\n    }, [])\r\n\r\n\r\n    const sendMessage = (data) => {\r\n        setMessages(messages => [...messages, data])\r\n        socket.current.emit(\"client_message\", data)\r\n    }\r\n\r\n    const connectClient = (client) => {\r\n        socket.current.emit('client_conn', client)\r\n        setConnected(true)\r\n        setServer(true)\r\n    }\r\n\r\n    return (\r\n        <SockContext.Provider value={{ messages, sendMessage, connectClient, connected, server }}>\r\n            {props.children}\r\n        </SockContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}